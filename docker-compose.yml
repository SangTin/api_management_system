services:
  postgres:
    image: postgres:latest
    container_name: api-management-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-api_management_db}
      POSTGRES_USER: ${DB_USER:-api_management}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER:-api_management}", "-d", "kong_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: api-management-redis
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: api-management-zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/logs
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: api-management-kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: api-mgmt-kafka-ui
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: true
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG

  kong-migrations:
    image: kong:latest
    container_name: api-management-kong-migrations
    restart: "no"
    entrypoint: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${DB_USER:-api_management}
      KONG_PG_PASSWORD: ${DB_PASSWORD:-password}
      KONG_PG_DATABASE: kong_db
    depends_on:
      postgres:
        condition: service_healthy

  api-gateway:
    image: kong:latest
    container_name: api-management-kong
    restart: always
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${DB_USER:-api_management}
      KONG_PG_PASSWORD: ${DB_PASSWORD:-password}
      KONG_PG_DATABASE: kong_db
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PLUGINS: bundled,user-service-auth
      KONG_LUA_PACKAGE_PATH: /usr/local/custom/?.lua;;
    volumes:
      - ./kong/plugins:/usr/local/custom/kong/plugins
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mock-vendors:
    build: ./mock_vendors
    container_name: api-management-mock-vendors
    ports:
      - "9000:9000"
    environment:
      - FLASK_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  user-service:
    build: 
      context: .
      dockerfile: ./user_service/Dockerfile
      args:
        SERVICE_NAME: user_service
    container_name: api-management-user-service
    volumes:
      - ./user_service:/app
      - ./shared:/app/shared
    env_file:
      - .env
    environment:
      - DB_NAME=user_service_db
    depends_on:
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy

  vendor-service:
    build:
      context: .
      dockerfile: ./vendor_service/Dockerfile
      args:
        SERVICE_NAME: vendor_service
    container_name: api-management-vendor-service
    volumes:
      - ./vendor_service:/app
      - ./shared:/app/shared
    env_file:
      - .env
    environment:
      - DB_NAME=vendor_service_db
    depends_on:
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy

  event-service:
    build: 
      context: .
      dockerfile: ./event_service/Dockerfile
      args:
        SERVICE_NAME: event_service
    container_name: api-management-event-service
    volumes:
      - ./event_service:/app
      - ./shared:/app/shared
    env_file:
      - .env
    environment:
      - DB_NAME=event_service_db
    depends_on:
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
